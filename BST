#Creating a node class, we use this modle to create every node in the tree.
#The node adds features like left node, right node, parent node, root value and also returns nodes as called.
class Node(object):
    def __init__(self,key, payload, parent= None):
        self.payload = payload
        self.key = key
        self.lc = None
        self.rc = None
        self.parent = parent
    def ilc(self):
        if self.parent and self.parent.lc == self:
            return True
    def irc(self):
        if self.parent and self.parent.rc == self:
            return True
    def isleaf(self):
        if self.lc == None and self.rc == None:
            return True
    def hlc(self):
        return self.lc
    def hrc(self):
        return self.rc
    def hasboth(self):
        return self.lc and self.rc
    def hasonechild(self):
        if self.lc and self.rc == None:
            return self.lc
        elif self.rc and self.lc == None:
            return self.rc
        else:
            return None
    def isroot(self):
        return self.parent
    def rootval(self):
        return self.key
#Actual binary tree class
class Bintree(object):
    def __init__(self):
        self.root = None
        self.size = 0
    def length(self):
        return self.size
    def put(self,key,value):
        if self.root:
            self._put(self.root,key,value)
        else:
            self.root = Node(key,value)
        
    def _put(self,node,key,value):
        if key < node.key:
            if node.hlc():
                self._put(node.lc, key,value)
            else:
                node.lc = Node(key,value, parent = node)
            self.size = self.size + 1
        else:
            if node.hrc():
                self._put(node.rc, key, value)
            else:
                node.rc = Node(key, value, parent = node)
            self.size = self.size + 1
    def get(self,key):
        if self.root.key == key:
            return (self.root)
        else:
            res = self._get(self.root, key)
            if res:    
                return res
            else:
                return None
    def _get(self,node,key):
        if not node:
            return None
        elif node.key == key:
            return node
        elif key < node.key:
            return self._get(node.lc, key)
        elif key > node.key:
            return self._get(node.rc, key)
    def delete(self,key):
        item = self.get(key)
        if item:
            self.remove(item)
            print (item.payload)
            #self.size = self.size-1 
        else:
            return ("ERROR")
    def remove(self,node):
        leafnode = 0
        ho = 0
        hb = 0
        if node.isleaf():
            leafnode = 1
            
        elif node.hasboth():
            
            hb = 1
           
        elif node.hasonechild():
            
            ho = 1
         
        self.final(node, leafnode, ho, hb)
        
    def final(self, node, leafnode, ho, hb):
        
        if leafnode == 1:
            if node.parent.hlc:
                node.parent.lc = None
            else:
                node.parent.rc = None
        elif ho == 1:
            if node.parent.lc == node:
                node.parent.lc = node.hasonechild()
                node.hasonechild().parent = node.parent
                
            else:
                node.parent.rc = node.hasonechild()
                node.hasonechild().parent = node.parent
        elif hb == 1:
            self.fm(node.rc, node)
                
            
            
    def fm(self, node1, node2):
        current = node1
        while current.hlc():
            current = current.lc
        current.parent.lc = None
        current.parent = node2.parent
        current.rc = node2.rc
        current.lc = node2.lc
        current.lc.parent = current
        current.rc.parent = current
        if node2.parent.lc == node2:
            node2.parent.lc = current
        else:
            node2.parent.rc = current
    #Interview questions
    #Tree traversals, three different kinds
    def inorder(self, tree):
        if tree:
            self.inorder(tree.hlc())
            print (tree.rootval())
            self.inorder(tree.hrc())
    def postorder(self,tree):
        if tree:
            self.postorder(tree.hlc())
            self.postorder(tree.hrc())
            print (tree.rootval())
    def preorder(self, tree):
        if tree:
            print (tree.rootval())
            self.preorder(tree.hlc())
            self.preorder(tree.hrc())
    #Printing all levels of tree
    def levelorderprint(self):
        queue = []
        queue.append(self.root)
        levelcount = 1
        currentcount = 0
        main = []
        while levelcount != 0:
            current = queue.pop(0)
            main.append(current.key)
            if current.hlc():
                queue.append(current.hlc())
                currentcount = currentcount + 1
            if current.hrc():
                queue.append(current.hrc())
                currentcount = currentcount + 1
            #print (main)
            levelcount = levelcount - 1
            if levelcount == 0:
                print (main)
                main = []    
                levelcount, currentcount = currentcount, levelcount
            
            
            
 
